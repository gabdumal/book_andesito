{
  "Build task (C++) (Local)": {
    "body": [
      "    {",
      "      \"args\": [",
      "        \"-fcolor-diagnostics\",",
      "        \"-fansi-escape-codes\",",
      "        \"-g\",",
      "        \"\\${workspaceFolder}/*.cpp\",",
      "        \"-I\",",
      "        \"\\${workspaceFolder}\",",
      "        \"-o\",",
      "        \"\\${workspaceFolder}/build\\${workspaceFolderBasename}\"",
      "      ],",
      "      \"command\": \"clang++\",",
      "      \"detail\": \"Tarefa de compilação de um projeto em C++. Compila todos os arquivos C++ na raiz do projeto em um único executável.\",",
      "      \"group\": {",
      "        \"kind\": \"build\"",
      "      },",
      "      \"label\": \"Clang: build C++ project (Local)\",",
      "      \"options\": {",
      "        \"cwd\": \"\\${workspaceFolder}\"",
      "      },",
      "      \"problemMatcher\": [\"\\$gcc\"],",
      "      \"type\": \"cppbuild\"",
      "    },",
    ],
    "description": "Build a project in C++ if all files are in the root directory",
    "prefix": "cpp-build-task",
  },
  "Build task (C) (Local)": {
    "body": [
      "    {",
      "      \"args\": [",
      "        \"-fcolor-diagnostics\",",
      "        \"-fansi-escape-codes\",",
      "        \"-g\",",
      "        \"\\${workspaceFolder}/*.c\",",
      "        \"-I\",",
      "        \"\\${workspaceFolder}\",",
      "        \"-o\",",
      "        \"\\${workspaceFolder}/build\\${workspaceFolderBasename}\"",
      "      ],",
      "      \"command\": \"clang\",",
      "      \"detail\": \"Tarefa de compilação de um projeto em C. Compila todos os arquivos C na raiz do projeto em um único executável.\",",
      "      \"group\": {",
      "        \"kind\": \"build\"",
      "      },",
      "      \"label\": \"Clang: build C project (Local)\",",
      "      \"options\": {",
      "        \"cwd\": \"\\${workspaceFolder}\"",
      "      },",
      "      \"problemMatcher\": [\"\\$gcc\"],",
      "      \"type\": \"cppbuild\"",
      "    },",
    ],
    "description": "Build a project in C if all files are in the root directory",
    "prefix": "c-build-task",
  },
  "Clang Format configuration": {
    "body": [
      "AccessModifierOffset: -4",
      "# AlignAfterOpenBracket: BlockIndent",
      "BasedOnStyle: Google",
      "BracedInitializerIndentWidth: 4",
      "ColumnLimit: 0",
      "ContinuationIndentWidth: 4",
      "EmptyLineAfterAccessModifier: Never",
      "EmptyLineBeforeAccessModifier: LogicalBlock",
      "FixNamespaceComments: true",
      "IndentAccessModifiers: true",
      "IndentCaseBlocks: true",
      "IndentCaseLabels: true",
      "IndentExternBlock: true",
      "IndentGotoLabels: true",
      "IndentPPDirectives: AfterHash",
      "IndentRequiresClause: true",
      "IndentWidth: 4",
      "InsertBraces: true",
      "IndentWrappedFunctionNames: true",
      "InsertNewlineAtEOF: true",
      "NamespaceIndentation: All",
      "ObjCBlockIndentWidth: 4",
      "PointerAlignment: Right",
      "PPIndentWidth: 4",
      "SeparateDefinitionBlocks: Always",
      "SpaceAfterCStyleCast: true",
      "SpaceAfterLogicalNot: false",
      "SpaceAfterTemplateKeyword: false",
      "SpaceBeforeAssignmentOperators: true",
      "SpaceBeforeCtorInitializerColon: false",
      "SpaceBeforeInheritanceColon: false",
      "SpaceBeforeParens: ControlStatements",
      "Standard: Latest",
      "TabWidth: 4",
      "UseTab: Never",
      "",
    ],
    "description": "Clang Format configuration",
    "prefix": "clang-format",
  },
  "Clang Tidy configuration": {
    "body": [
      "Checks: \"-*,readability-identifier-naming\"",
      "CheckOptions:",
      "  # Macro",
      "  - key: readability-identifier-naming.MacroDefinitionCase",
      "    value: UPPER_CASE",
      "  - key: readability-identifier-naming.MacroDefinitionPrefix",
      "    value: \"_\"",
      "  - key: readability-identifier-naming.MacroDefinitionIgnoredRegexp",
      "    value: \"^[A-Z]+(_[A-Z]+)*_$\"",
      "",
      "  # Default",
      "  - key: readability-identifier-naming.VariableCase",
      "    value: lower_case",
      "",
      "  - key: readability-identifier-naming.StaticVariableCase",
      "    value: lower_case",
      "",
      "  - key: readability-identifier-naming.ParameterCase",
      "    value: lower_case",
      "",
      "  - key: readability-identifier-naming.FunctionCase",
      "    value: camelBack",
      "",
      "  - key: readability-identifier-naming.TypeAliasCase",
      "    value: CamelCase",
      "",
      "  - key: readability-identifier-naming.TypedefCase",
      "    value: CamelCase",
      "",
      "  - key: readability-identifier-naming.ConstantCase",
      "    value: UPPER_CASE",
      "",
      "  - key: readability-identifier-naming.StaticConstantCase",
      "    value: lower_case",
      "",
      "  - key: readability-identifier-naming.ConstexprVariableCase # Ensure the constexpr variables are treated as constants",
      "    value: lower_case",
      "  - key: readability-identifier-naming.ConstexprVariablePrefix",
      "    value: \"\"",
      "",
      "  # Class",
      "  - key: readability-identifier-naming.ClassCase",
      "    value: CamelCase",
      "",
      "  - key: readability-identifier-naming.MemberCase",
      "    value: lower_case",
      "",
      "  # Enum",
      "  - key: readability-identifier-naming.EnumCase",
      "    value: CamelCase",
      "",
      "  - key: readability-identifier-naming.EnumConstantCase",
      "    value: UPPER_CASE",
      "",
      "  # Struct",
      "  - key: readability-identifier-naming.StructMemberCase",
      "    value: lower_case",
      "",
      "  # Namespace",
      "  - key: readability-identifier-naming.NamespaceCase",
      "    value: CamelCase",
      "",
      "  - key: readability-identifier-naming.NamespaceConstantCase",
      "    value: lower_case",
      "",
      "  - key: readability-identifier-naming.ClassMemberCase",
      "    value: lower_case",
      "",
      "  # Global",
      "  - key: readability-identifier-naming.GlobalConstantCase",
      "    value: UPPER_CASE",
      "",
    ],
    "description": "Clang Tidy configuration",
    "prefix": "clang-tidy",
  },
  "Debug launcher (C++) (Local)": {
    "body": [
      "     {",
      "      \"args\": [],",
      "      \"cwd\": \"\\${workspaceFolder}\",",
      "      \"name\": \"LLDB: build and launch C++ project (Local)\",",
      "      \"preLaunchTask\": \"Clang: build C++ project (Local)\",",
      "      \"program\": \"\\${workspaceFolder}/build/\\${workspaceFolderBasename}\",",
      "      \"request\": \"launch\",",
      "      \"terminal\": \"console\",",
      "      \"type\": \"lldb\"",
      "    },",
    ],
    "description": "Launch a program in C++ using LLDB",
    "prefix": "cpp-launch",
  },
  "Debug launcher (C) (Local)": {
    "body": [
      "     {",
      "      \"args\": [],",
      "      \"cwd\": \"\\${workspaceFolder}\",",
      "      \"name\": \"LLDB: build and launch C project (Local)\",",
      "      \"preLaunchTask\": \"Clang: build C project (Local)\",",
      "      \"program\": \"\\${workspaceFolder}/build/\\${workspaceFolderBasename}\",",
      "      \"request\": \"launch\",",
      "      \"terminal\": \"console\",",
      "      \"type\": \"lldb\"",
      "    },",
    ],
    "description": "Launch a program in C using LLDB",
    "prefix": "c-launch",
  },
  "Launch file": {
    "body": [
      "{",
      "  \"configurations\": [],",
      "  \"version\": \"0.2.0\"",
      "}",
      "",
    ],
    "description": "Launch file",
    "prefix": "launch-json",
  },
  "Tasks file": {
    "body": [
      "{",
      "  \"version\": \"2.0.0\",",
      "  \"tasks\": [",
      "  ]",
      "}",
      "",
    ],
    "description": "Scheme of tasks.json file",
    "prefix": "tasks-json",
  },
}
